{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- Finish importing package\n"
     ]
    }
   ],
   "source": [
    "# 0 - import library for the project \n",
    "#import os, random, sys, time\n",
    "#import requests\n",
    "\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.keys import Keys\n",
    "from bs4 import BeautifulSoup\n",
    "from time import sleep\n",
    "import csv\n",
    "print('- Finish importing package')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- Finish initializing a driver\n",
      "- Finish importing the login credentials\n",
      "- Finish keying in email\n",
      "- Finish keying in password\n",
      "- Finish logging in\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "# Step 1: Login to Linkedin\n",
    "\n",
    "# Open Chrome and login Linkedin login site\n",
    "driver = webdriver.Chrome(\"/usr/local/bin/chromedriver\")\n",
    "url = 'https://www.linkedin.com/login?fromSignIn=true&trk=guest_homepage-basic_nav-header-signin'\n",
    "driver.get(url)\n",
    "print('- Finish opening a driver')\n",
    "\n",
    "# Import username and password\n",
    "login_credential = open('credentials.txt')\n",
    "line = login_credential.readlines()\n",
    "username = line[0]\n",
    "password = line[1]\n",
    "print('- Finish importing the login credentials')\n",
    "\n",
    "# Key in username\n",
    "elementID = driver.find_element_by_id('username')\n",
    "elementID.send_keys(username)\n",
    "sleep(3)\n",
    "\n",
    "print('- Keying in the username')\n",
    "\n",
    "# Key in password\n",
    "elementID = driver.find_element_by_name('session_password')\n",
    "elementID.send_keys(password)\n",
    "sleep(3)\n",
    "\n",
    "print('- Keying in the password')\n",
    "\n",
    "# Click login button\n",
    "#log_in_field = driver.find_element_by_class_name(\"btn__primary--large\").click()\n",
    "elementID.submit()\n",
    "print('- Finish logging in ')\n",
    "'''\n",
    "\n",
    "# Step 1: Login to Linkedin\n",
    "\n",
    "# Open Chrome and login Linkedin login site\n",
    "driver = webdriver.Chrome()\n",
    "sleep(2)\n",
    "url = 'https://www.linkedin.com/login'\n",
    "driver.get(url)\n",
    "print('- Finish initializing a driver')\n",
    "sleep(2)\n",
    "\n",
    "# Import username and password\n",
    "credential = open('credentials.txt')\n",
    "line = credential.readlines()\n",
    "username = line[0]\n",
    "password = line[1]\n",
    "print('- Finish importing the login credentials')\n",
    "sleep(2)\n",
    "\n",
    "# Key in username\n",
    "email_field = driver.find_element_by_id('username')\n",
    "email_field.send_keys(username)\n",
    "print('- Finish keying in email')\n",
    "sleep(3)\n",
    "\n",
    "# Key in password\n",
    "password_field = driver.find_element_by_name('session_password')\n",
    "password_field.send_keys(password)\n",
    "print('- Finish keying in password')\n",
    "sleep(2)\n",
    "\n",
    "# Click login button\n",
    "signin_field = driver.find_element_by_xpath('//*[@id=\"app__container\"]/main/div[2]/form/div[3]/button')\n",
    "signin_field.click()\n",
    "print('- Finish logging in')\n",
    "sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "What profile do you want to scrape? Frontend Developer people\n",
      "- Finish searching ...\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "# Step 2: Search for the profile we want to crawl\n",
    "\n",
    "#Click to search bar and input the search query\n",
    "search = driver.find_element_by_class_name(\"search-global-typeahead__input\") #Define id by using inspect location\n",
    "\n",
    "#search_button = driver.find_element_by_id(\"global-nav-typeahead\").click() #Click to search bar\n",
    "key_word = input(\"What profile do you want to scrape? \")\n",
    "search.send_keys(key_word)\n",
    "search.send_keys(Keys.RETURN)\n",
    "print('- Finish searching')\n",
    "'''\n",
    "# Step 2: Search for the profile we want to crawl\n",
    "\n",
    "# Locate the search bar element\n",
    "search_field = driver.find_element_by_xpath('//*[@id=\"ember16\"]/input')\n",
    "\n",
    "# Input the search query to the search bar\n",
    "search_query = input('What profile do you want to scrape? ')\n",
    "search_field.send_keys(search_query)\n",
    "\n",
    "# Search\n",
    "search_field.send_keys(Keys.RETURN)\n",
    "print('- Finish searching')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "How many pages you want to scrape: 3\n"
     ]
    }
   ],
   "source": [
    "# Step 3: Scrape the URLs of the profiles\n",
    "\n",
    "# scrape page 1 URL \n",
    "'''visited_profiles = []\n",
    "def get_new_profile_ID(soup, search_result):\n",
    "    profile_ID = []\n",
    "    profiles_on_page = soup.find('div', {'class':'neptune-grid two-column'})\n",
    "    #print(profiles_on_page)\n",
    "    all_links = profiles_on_page.findAll('a',{'class': 'search-result__result-link ember-view'})\n",
    "    #print(all_links)\n",
    "    for link in all_links:\n",
    "        user_ID = link.get('href')\n",
    "        if user_ID not in search_result and user_ID not in visited_profiles and user_ID not in profile_ID:\n",
    "            profile_ID.append(user_ID)\n",
    "    return profile_ID'''\n",
    "\n",
    "# Write a function to extract the URLs of one page\n",
    "def GetURL():\n",
    "    page_source = BeautifulSoup(driver.page_source)\n",
    "    profiles = page_source.find_all('a', class_ = 'search-result__result-link ember-view')\n",
    "    all_profile_URL = []\n",
    "    for profile in profiles:\n",
    "        profile_ID = profile.get('href')\n",
    "        profile_URL = \"https://www.linkedin.com\" + profile_ID\n",
    "        if profile_URL not in all_profile_URL:\n",
    "            all_profile_URL.append(profile_URL)\n",
    "    return all_profile_URL\n",
    "\n",
    "print(GetURL())\n",
    "\n",
    "'''\n",
    "# loop through all the pages --> scrape all URLs\n",
    "def get_new_profile_ID_for_multiple_pages():\n",
    "    input_page = int(input('How many pages you want to scrape: '))\n",
    "    all_result = []\n",
    "    search_result = []\n",
    "    page = 0\n",
    "    for page in range(input_page):\n",
    "        search_result = get_new_profile_ID(BeautifulSoup(driver.page_source), search_result)\n",
    "        sleep(2)\n",
    "        driver.execute_script('window.scrollTo(0, document.body.scrollHeight);') #scroll to the end of the page\n",
    "        sleep(3)\n",
    "        next_button = driver.find_element_by_class_name('artdeco-pagination__button--next')\n",
    "        driver.execute_script(\"arguments[0].click();\", next_button)\n",
    "        all_result = all_result + search_result\n",
    "        page = page + 1\n",
    "        # print('page: ', page, all_result)\n",
    "        sleep(2)\n",
    "    return all_result\n",
    "\n",
    "profile_ID = get_new_profile_ID_for_multiple_pages()\n",
    "#print(profile_ID)\n",
    "'''\n",
    "\n",
    "# Navigate through many page, and extract the profile URLs of each page\n",
    "\n",
    "def GetURLsonPages():\n",
    "    input_page = int(input('How many pages you want to scrape: '))\n",
    "    URLs_all_page = []\n",
    "    for page in range(input_page):\n",
    "        URLs_one_page = GetURL()\n",
    "        sleep(2)\n",
    "        driver.execute_script('window.scrollTo(0, document.body.scrollHeight);') #scroll to the end of the page\n",
    "        sleep(3)\n",
    "        next_button = driver.find_element_by_class_name('artdeco-pagination__button--next')\n",
    "        driver.execute_script(\"arguments[0].click();\", next_button)\n",
    "        URLs_all_page = URLs_all_page + URLs_one_page\n",
    "        # page = page + 1\n",
    "        # print('page: ', page, all_result)\n",
    "        sleep(2)\n",
    "    return URLs_all_page\n",
    "\n",
    "print(GetURLsonPages())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- Accessing profile:  https://www.linkedin.com//in/hai-duy-lam-7b4216138/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  hai duy lam\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Frontend Developer at Free People\n",
      "- Accessing profile:  https://www.linkedin.com//in/trongtai37/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  _Tai Nguyen Trong_\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Frontend Developer at FPT Software\n",
      "- Accessing profile:  https://www.linkedin.com//in/vojislavmilenkovic/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Vojislav Milenkovic\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Frontend Developer at NFQ Asia\n",
      "- Accessing profile:  https://www.linkedin.com//in/hongochoangviet/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Viet Ho\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Frontend Developer at LINE Corp\n",
      "- Accessing profile:  https://www.linkedin.com//in/tai-duongquoc-370042199/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Tai DuongQuoc\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Frontend Web Developer at EdgeWorks German R&D Software Ltd.\n",
      "- Accessing profile:  https://www.linkedin.com//in/viet-anh-nguyen-86ba04184/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Viet Anh (Tony) Nguyen\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Frontend Developer\n",
      "- Accessing profile:  https://www.linkedin.com//in/vietanhle1808/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Việt Anh Lê\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Frontend Developer at Adaptis GmbH\n",
      "- Accessing profile:  https://www.linkedin.com//in/anh-quang-b29347145/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Anh Quang\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Frontend Mobile Developer at SOLAZU Co., Ltd\n",
      "- Accessing profile:  https://www.linkedin.com//in/chrispham124/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Hieu Pham\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Frontend Developer at FPT Software\n",
      "- Accessing profile:  https://www.linkedin.com//in/vthoa-ta/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Thoa Ta\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Frontend Web Developer at TEKO Việt Nam\n",
      "- Accessing profile:  https://www.linkedin.com//in/nguyen-dinh-phu-242146161/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Nguyen Dinh Phu\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Frontend Web Developer at FPT Software\n",
      "- Accessing profile:  https://www.linkedin.com//in/vtquy98/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Thanh Quy Vo\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Frontend Web Developer at Fulfilled\n",
      "- Accessing profile:  https://www.linkedin.com//in/t%C3%BA-th%C3%A0nh-nguy%E1%BB%85n-007b88153/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Tú Thành Nguyễn\n",
      "--- Profile location is:  Ho Chi Minh City, Vietnam\n",
      "--- Profile title is:  Frontend Developer at VinHMS\n",
      "- Accessing profile:  https://www.linkedin.com//in/syhungdoan/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Hung Doan Sy\n",
      "--- Profile location is:  Hanoi, Thành Phố Hà Nội, Vietnam\n",
      "--- Profile title is:  Frontend Developer at Got It Vietnam\n",
      "- Accessing profile:  https://www.linkedin.com//in/huu-luan-nguyen-383ab1134/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Huu Luan Nguyen\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Frontend Developer at bbv Vietnam\n",
      "- Accessing profile:  https://www.linkedin.com//in/trung-ho-3a691797/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Trung Ho\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Frontend Developer at NFQ Asia\n",
      "- Accessing profile:  https://www.linkedin.com//in/phong-duong/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Phong Duong\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Full-stack Developer\n",
      "- Accessing profile:  https://www.linkedin.com//in/y-ton-chung-0311686b/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Y Ton Chung\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Senior Frontend Developer\n",
      "- Accessing profile:  https://www.linkedin.com//in/trung-nguyen-aa804117a/\n",
      "- Start scraping the data ...\n",
      "--- Profile name is:  Trung Nguyen\n",
      "--- Profile location is:  Vietnam\n",
      "--- Profile title is:  Front End Developer\n"
     ]
    }
   ],
   "source": [
    "# Step 4: Scrape the data of 1 Linkedin profile, and write the data to a .CSV file\n",
    "\n",
    "URLs_all_page = GetURLsonPages()\n",
    "\n",
    "with open('output.csv', 'w',  newline = '') as file_output:\n",
    "    headers = ['Name', 'Job Title', 'Location', 'URL']\n",
    "    writer = csv.DictWriter(file_output, delimiter=',', lineterminator='\\n',fieldnames=headers)\n",
    "    writer.writeheader()\n",
    "    for linkedin_URL in URLs_all_page:\n",
    "        driver.get(linkedin_URL)\n",
    "        print('- Accessing profile: ', linkedin_URL)\n",
    "\n",
    "#         last_height = driver.execute_script('return document.body.scrollHeight')\n",
    "#         for i in range(3):\n",
    "#             driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')\n",
    "#             time.sleep(5)\n",
    "#             new_height = driver.execute_script('return document.body.scrollHeight')\n",
    "#             if new_height == last_height:\n",
    "#                 break\n",
    "#             last_height == new_height\n",
    "\n",
    "        print('- Start scraping the data ...')\n",
    "\n",
    "        page_source = driver.page_source\n",
    "        soup = BeautifulSoup(page_source, \"html.parser\")\n",
    "\n",
    "        name_div = soup.find('div',{'class':'flex-1 mr5'})\n",
    "        name_loc = name_div.find_all('ul')\n",
    "        name = name_loc[0].find('li').get_text().strip() #Remove unnecessary characters \n",
    "        print('--- Profile name is: ', name)\n",
    "        location = name_loc[1].find('li').get_text().strip() #Remove unnecessary characters \n",
    "        print('--- Profile location is: ', loc)\n",
    "        profile_title = name_div.find('h2').get_text().strip()\n",
    "        print('--- Profile title is: ', profile_title)\n",
    "        writer.writerow({headers[0]:name, headers[1]:loc, headers[2]:profile_title, headers[3]:linkedin_URL})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 0 - import library for the project \n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.keys import Keys\n",
    "from bs4 import BeautifulSoup\n",
    "from time import sleep\n",
    "import csv\n",
    "print('- Finish importing package')\n",
    "\n",
    "# 1 - login\n",
    "\n",
    "# Open Chrome and login Linkedin login site\n",
    "driver = webdriver.Chrome(\"/usr/local/bin/chromedriver\")\n",
    "url = 'https://www.linkedin.com/login'\n",
    "driver.get(url)\n",
    "print('- Finish initializing a driver')  \n",
    "sleep(2)\n",
    "\n",
    "# Import username and password\n",
    "login_credential = open('credentials.txt')\n",
    "line = login_credential.readlines()\n",
    "username = line[0]\n",
    "password = line[1]\n",
    "print('- Finish importing the login credentials')\n",
    "\n",
    "# Key in username\n",
    "email_field = driver.find_element_by_id('username')\n",
    "email_field.send_keys(username)\n",
    "print('- Finish keying in email')\n",
    "sleep(3)\n",
    "\n",
    "# Key in password\n",
    "password_field = driver.find_element_by_name('session_password')\n",
    "password_field.send_keys(password)\n",
    "print('- Finish keying in password')\n",
    "sleep(2)\n",
    "\n",
    "# Click login button\n",
    "signin_field = driver.find_element_by_xpath('//*[@id=\"app__container\"]/main/div[2]/form/div[3]/button')\n",
    "signin_field.click()\n",
    "print('- Finish logging in')\n",
    "sleep(3)\n",
    "\n",
    "# Step 2: Search for the profile we want to crawl\n",
    "\n",
    "#Click to search bar and input the search query\n",
    "search = driver.find_element_by_class_name(\"search-global-typeahead__input\") #Define id by using inspect location\n",
    "\n",
    "#search_button = driver.find_element_by_id(\"global-nav-typeahead\").click() #Click to search bar\n",
    "key_word = input(\"What profile do you want to scrape? \")\n",
    "search.send_keys(key_word)\n",
    "search.send_keys(Keys.RETURN)\n",
    "print('- Finish searching ...')\n",
    "\n",
    "# 3 - scrape URLs\n",
    "\n",
    "# scrape page 1 URL \n",
    "visited_profiles = []\n",
    "def get_new_profile_ID(soup, search_result):\n",
    "    profile_ID = []\n",
    "    profiles_on_page = soup.find('div', {'class':'neptune-grid two-column'})\n",
    "    #print(profiles_on_page)\n",
    "    all_links = profiles_on_page.findAll('a',{'class': 'search-result__result-link ember-view'})\n",
    "    #print(all_links)\n",
    "    for link in all_links:\n",
    "        user_ID = link.get('href')\n",
    "        if user_ID not in search_result and user_ID not in visited_profiles and user_ID not in profile_ID:\n",
    "            profile_ID.append(user_ID)\n",
    "    return profile_ID\n",
    "\n",
    "# loop through all the pages --> scrape all URLs\n",
    "def get_new_profile_ID_for_multiple_pages():\n",
    "    input_page = int(input('How many pages you want to scrape: '))\n",
    "    all_result = []\n",
    "    search_result = []\n",
    "    page = 0\n",
    "    for page in range(input_page):\n",
    "        search_result = get_new_profile_ID(BeautifulSoup(driver.page_source), search_result)\n",
    "        sleep(2)\n",
    "        driver.execute_script('window.scrollTo(0, document.body.scrollHeight);') #scroll to the end of the page\n",
    "        sleep(3)\n",
    "        next_button = driver.find_element_by_class_name('artdeco-pagination__button--next')\n",
    "        driver.execute_script(\"arguments[0].click();\", next_button)\n",
    "        all_result = all_result + search_result\n",
    "        page = page + 1\n",
    "        # print('page: ', page, all_result)\n",
    "        sleep(2)\n",
    "    return all_result\n",
    "\n",
    "profile_ID = get_new_profile_ID_for_multiple_pages()\n",
    "#print(profile_ID)\n",
    "\n",
    "# 4 - write function to scrape the content and store the data in csv file\n",
    "\n",
    "for visiting_ID in profile_ID:\n",
    "    full_link = \"https://www.linkedin.com/\" + visiting_ID\n",
    "    visited_profiles.append(full_link)\n",
    "\n",
    "with open('output.csv', 'w',  newline = '') as file_output:\n",
    "    headers = ['Name', 'Job Title', 'Location', 'URL']\n",
    "    writer = csv.DictWriter(file_output, delimiter=',', lineterminator='\\n',fieldnames=headers)\n",
    "    writer.writeheader()\n",
    "    for linkedin_URL in visited_profiles:\n",
    "        driver.get(linkedin_URL)\n",
    "        print('- Accessing profile: ', linkedin_URL)\n",
    "\n",
    "        last_height = driver.execute_script('return document.body.scrollHeight')\n",
    "\n",
    "        for i in range(3):\n",
    "            driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')\n",
    "            time.sleep(5)\n",
    "            new_height = driver.execute_script('return document.body.scrollHeight')\n",
    "            if new_height == last_height:\n",
    "                break\n",
    "            last_height == new_height\n",
    "\n",
    "        print('- Start scraping the data ...')\n",
    "\n",
    "        page_source = driver.page_source\n",
    "        soup = BeautifulSoup(page_source, \"html.parser\")\n",
    "\n",
    "        name_div = soup.find('div',{'class':'flex-1 mr5'})\n",
    "        name_loc = name_div.find_all('ul')\n",
    "        name = name_loc[0].find('li').get_text().strip() #Remove unnecessary characters \n",
    "        print('--- Profile name is: ', name)\n",
    "        loc = name_loc[1].find('li').get_text().strip() #Remove unnecessary characters \n",
    "        print('--- Profile location is: ', loc)\n",
    "        profile_title = name_div.find('h2').get_text().strip()\n",
    "        print('--- Profile title is: ', profile_title)\n",
    "        writer.writerow({headers[0]:name, headers[1]:loc, headers[2]:profile_title, headers[3]:linkedin_URL})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
